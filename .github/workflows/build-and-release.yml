name: Build and Release VS Code Extension

on:
  # 手动触发 - 支持版本号更新
  workflow_dispatch:
    inputs:
      version:
        description: '新版本号 (例如: 0.0.3, 0.1.0, 1.0.0-beta.1)'
        required: true
        type: string
      release_type:
        description: '发布类型'
        required: true
        default: 'prerelease'
        type: choice
        options:
          - 'release'
          - 'prerelease'
          - 'draft'
      create_release:
        description: '是否创建GitHub Release'
        required: true
        default: true
        type: boolean
      custom_release_notes:
        description: '自定义发布说明 (可选，留空则自动从CHANGELOG.md读取)'
        required: false
        type: string
      auto_changelog:
        description: '自动生成变更日志'
        required: true
        default: true
        type: boolean
      publish_marketplace:
        description: '发布到VS Code Marketplace'
        required: true
        default: false
        type: boolean

  # 自动触发 - 推送到main分支时自动构建（不更新版本号）
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'

  # Pull Request触发
  pull_request:
    branches:
      - main
      - master

# 添加权限配置，确保可以创建 Release 和写入内容
permissions:
  contents: write
  pull-requests: read
  issues: read
  packages: write

env:
  NODE_VERSION: '18'

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      vsix-name: ${{ steps.build.outputs.vsix-name }}
      should_release: ${{ steps.version.outputs.should_release }}
      version_changed: ${{ steps.version.outputs.version_changed }}
      
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 代码检查
        run: npm run lint

      - name: 处理版本号
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # 手动触发 - 使用用户输入的版本号
            NEW_VERSION="${{ github.event.inputs.version }}"
            echo "更新版本号到: $NEW_VERSION"
            npm version $NEW_VERSION --no-git-tag-version
            
            # 配置git用户信息
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            # 提交版本更改
            git add package.json
            git commit -m "chore: bump version to $NEW_VERSION" || echo "No changes to commit"
            git push origin ${{ github.ref_name }} || echo "No changes to push"
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "is_manual=true" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # 自动触发 - 检查版本号变化
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            
            # 获取上一次的版本号
            PREVIOUS_VERSION=""
            if [ "${{ github.event_name }}" = "push" ]; then
              # 尝试从上一个提交获取版本号
              git fetch origin ${{ github.ref_name }}
              if git show HEAD~1:package.json > /dev/null 2>&1; then
                PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync(0, 'utf8')).version" 2>/dev/null || echo "")
              fi
            fi
            
            echo "当前版本: $CURRENT_VERSION"
            echo "上一个版本: $PREVIOUS_VERSION"
            
            # 检查版本是否变化
            if [ -n "$PREVIOUS_VERSION" ] && [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "✅ 检测到版本号变化: $PREVIOUS_VERSION → $CURRENT_VERSION"
              echo "将执行完整的发布流程..."
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
              echo "is_manual=false" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "version_changed=true" >> $GITHUB_OUTPUT
            else
              echo "ℹ️  版本号未变化，执行普通构建..."
              BUILD_NUMBER=${{ github.run_number }}
              VERSION_WITH_BUILD="${CURRENT_VERSION}+build.${BUILD_NUMBER}"
              echo "构建版本: $VERSION_WITH_BUILD"
              echo "version=$VERSION_WITH_BUILD" >> $GITHUB_OUTPUT
              echo "is_manual=false" >> $GITHUB_OUTPUT
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 编译项目
        run: npm run compile

      - name: 运行测试
        run: |
          if [ -f "package.json" ] && npm run | grep -q "test"; then
            echo "验证构建产物..."
            # 基本构建验证 - 不需要启动 VS Code
            node -e "
              const assert = require('assert');
              const fs = require('fs');
              
              console.log('🔍 验证 package.json...');
              const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
              assert.ok(pkg.name, 'Package name should exist');
              assert.ok(pkg.version, 'Package version should exist');
              assert.ok(pkg.engines.vscode, 'VS Code engine should be specified');
              
              console.log('🔍 验证编译产物...');
              assert.ok(fs.existsSync('dist/extension.js'), 'Compiled extension should exist');
              
              console.log('🔍 验证语言配置文件...');
              const languageFiles = [
                'syntaxes/mdp/mdp.tmLanguage.json',
                'syntaxes/gro/gro.tmLanguage.json', 
                'syntaxes/top/top.tmLanguage.json',
                'syntaxes/ndx/ndx.tmLanguage.json'
              ];
              languageFiles.forEach(file => {
                assert.ok(fs.existsSync(file), \`Language file \${file} should exist\`);
              });
              
              console.log('🔍 验证代码片段文件...');
              const snippetFiles = ['snippets/mdp.json', 'snippets/gro.json', 'snippets/ndx.json'];
              snippetFiles.forEach(file => {
                assert.ok(fs.existsSync(file), \`Snippet file \${file} should exist\`);
                JSON.parse(fs.readFileSync(file, 'utf8')); // 验证 JSON 格式
              });
              
              console.log('✅ 所有构建验证通过！');
            "
            
            echo "注意: VS Code 扩展功能测试在 CI 环境中被跳过"
            echo "完整的扩展测试请在本地开发环境中运行: npm test"
          else
            echo "跳过测试 - 未配置测试命令"
          fi

      - name: 打包扩展
        id: build
        run: |
          # 安装vsce如果没有
          if ! command -v vsce &> /dev/null; then
            npm install -g @vscode/vsce
          fi
          
          # 打包扩展
          if [ "${{ steps.version.outputs.should_release }}" = "true" ]; then
            # 需要发布 - 使用package.json中的版本号
            vsce package
            VSIX_FILE=$(ls *.vsix | head -n 1)
          else
            # 普通构建 - 使用带构建号的版本
            vsce package --out "gromacs-helper-vscode-${{ steps.version.outputs.version }}.vsix"
            VSIX_FILE="gromacs-helper-vscode-${{ steps.version.outputs.version }}.vsix"
          fi
          
          echo "生成的VSIX文件: $VSIX_FILE"
          echo "vsix-name=$VSIX_FILE" >> $GITHUB_OUTPUT
          
          # 验证文件存在
          if [ ! -f "$VSIX_FILE" ]; then
            echo "错误: VSIX文件未生成"
            exit 1
          fi
          
          # 显示文件信息
          ls -la *.vsix

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: vsix-package-${{ steps.version.outputs.version }}
          path: "*.vsix"
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.should_release == 'true'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: vsix-package-${{ needs.build.outputs.version }}

      - name: 生成发布说明
        id: release_notes
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          VSIX_FILE="${{ needs.build.outputs.vsix-name }}"
          
          # 生成基础发布说明模板
          cat > release_notes_template.md << 'EOF'
          # GROMACS Helper for VS Code v${VERSION}
          
          ## 📦 安装方式
          
          ### 方法一：从VSIX文件安装
          1. 下载附件中的 `${VSIX_FILE}` 文件
          2. 在VS Code中按 `Ctrl+Shift+P` (macOS: `Cmd+Shift+P`)
          3. 输入 "Extensions: Install from VSIX..."
          4. 选择下载的VSIX文件进行安装
          
          ### 方法二：命令行安装
          ```bash
          code --install-extension ${VSIX_FILE}
          ```
          
          ## 🚀 功能特性
          
          - 📝 **语法高亮**: 完整支持MDP、TOP、GRO、NDX文件格式
          - 🔍 **智能提示**: 参数自动补全和悬停帮助
          - 📋 **代码片段**: 常用模板快速插入
          - 🎯 **符号导航**: 快速跳转和大纲视图
          - 📐 **代码格式化**: 自动格式化支持
          - 🔧 **诊断功能**: 实时错误检查和建议
          
          ## 🔧 支持的文件类型
          
          - **MDP文件** (.mdp) - 分子动力学参数文件
          - **TOP文件** (.top, .itp) - 拓扑文件
          - **GRO文件** (.gro) - 结构坐标文件  
          - **NDX文件** (.ndx) - 索引文件
          EOF
          
          # 替换模板中的变量
          sed -i "s/\${VERSION}/$VERSION/g" release_notes_template.md
          sed -i "s/\${VSIX_FILE}/$VSIX_FILE/g" release_notes_template.md
          
          # 处理发布说明内容
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.custom_release_notes }}" ]; then
            echo "使用自定义发布说明..."
            echo "${{ github.event.inputs.custom_release_notes }}" > custom_notes.md
            echo "" >> custom_notes.md
            cat release_notes_template.md >> custom_notes.md
            cp custom_notes.md release_notes.md
          elif [ -f "CHANGELOG.md" ] && ([ "${{ github.event_name }}" != "workflow_dispatch" ] || [ "${{ github.event.inputs.auto_changelog }}" = "true" ]); then
            echo "从 CHANGELOG.md 提取发布说明..."
            
            # 尝试提取当前版本的变更日志
            VERSION_CLEAN=$(echo "$VERSION" | sed 's/^v//')
            
            # 查找版本标题的多种格式
            CHANGELOG_CONTENT=""
            if grep -q "## \[${VERSION_CLEAN}\]" CHANGELOG.md; then
              # 格式: ## [0.0.3] - 2024-01-01
              CHANGELOG_CONTENT=$(awk "/## \[${VERSION_CLEAN}\]/,/## \[/{if(/## \[${VERSION_CLEAN}\]/) print; else if(/## \[/) exit; else print}" CHANGELOG.md | head -n -1)
            elif grep -q "## ${VERSION_CLEAN}" CHANGELOG.md; then
              # 格式: ## 0.0.3
              CHANGELOG_CONTENT=$(awk "/## ${VERSION_CLEAN}/,/## /{if(/## ${VERSION_CLEAN}/) print; else if(/## /) exit; else print}" CHANGELOG.md | head -n -1)
            elif grep -q "# v${VERSION_CLEAN}" CHANGELOG.md; then
              # 格式: # v0.0.3
              CHANGELOG_CONTENT=$(awk "/# v${VERSION_CLEAN}/,/# v/{if(/# v${VERSION_CLEAN}/) print; else if(/# v/) exit; else print}" CHANGELOG.md | head -n -1)
            fi
            
            if [ -n "$CHANGELOG_CONTENT" ]; then
              echo "找到版本 $VERSION_CLEAN 的变更日志"
              echo "## 📝 本版本更新" > version_changes.md
              echo "" >> version_changes.md
              echo "$CHANGELOG_CONTENT" | tail -n +2 >> version_changes.md
              echo "" >> version_changes.md
              cat version_changes.md release_notes_template.md > release_notes.md
            else
              echo "未找到版本 $VERSION_CLEAN 的变更日志，使用默认模板"
              cp release_notes_template.md release_notes.md
            fi
          else
            echo "使用默认发布说明模板..."
            cp release_notes_template.md release_notes.md
          fi
          
          # 添加结尾信息
          cat >> release_notes.md << 'EOF'
          
          ## 📝 完整更新日志
          
          请查看项目的 [更新日志](https://github.com/gromacs-helper/gromacs-helper-vscode/blob/main/CHANGELOG.md) 了解详细变更。
          
          ---
          
          🐛 **问题反馈**: [GitHub Issues](https://github.com/gromacs-helper/gromacs-helper-vscode/issues)
          📖 **使用文档**: [README](https://github.com/gromacs-helper/gromacs-helper-vscode#readme)
          EOF
          
          # 为自动发布添加特殊标记
          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            sed -i '1s/^/🤖 **自动发布** - 检测到版本号变化自动触发\n\n/' release_notes.md
          fi
          
          echo "生成的发布说明："
          echo "=========================="
          cat release_notes.md
          echo "=========================="

      - name: 预览发布说明
        run: |
          echo "## 📋 发布说明预览" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```markdown' >> $GITHUB_STEP_SUMMARY
          cat release_notes.md >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: "GROMACS Helper v${{ needs.build.outputs.version }}"
          body_path: release_notes.md
          files: "*.vsix"
          draft: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'draft' }}
          prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'prerelease' || github.event_name != 'workflow_dispatch' }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          token: ${{ secrets.GITHUB_TOKEN }}

  # 发布到VS Code Marketplace
  marketplace:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: needs.build.outputs.should_release == 'true' && (github.event_name != 'workflow_dispatch' || (github.event.inputs.publish_marketplace == 'true' && github.event.inputs.release_type == 'release'))
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: vsix-package-${{ needs.build.outputs.version }}

      - name: 验证Marketplace Token
        run: |
          if [ -z "${{ secrets.VSCE_PAT }}" ]; then
            echo "❌ 错误: 未配置 VSCE_PAT secret"
            echo "请在 GitHub 仓库设置中添加 VS Code Marketplace Personal Access Token"
            echo "设置路径: Settings -> Secrets and variables -> Actions -> Repository secrets"
            echo "Secret 名称: VSCE_PAT"
            exit 1
          else
            echo "✅ VSCE_PAT secret 已配置"
          fi

      - name: 发布到Marketplace
        run: |
          # 安装vsce
          npm install -g @vscode/vsce
          
          echo "🚀 开始发布到 VS Code Marketplace..."
          echo "版本: ${{ needs.build.outputs.version }}"
          echo "VSIX文件: ${{ needs.build.outputs.vsix-name }}"
          
          # 使用VSIX文件发布到marketplace
          vsce publish --packagePath "${{ needs.build.outputs.vsix-name }}" --pat "${{ secrets.VSCE_PAT }}"
          
          echo "✅ 成功发布到 VS Code Marketplace!"
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: 发布成功通知
        run: |
          echo "## 🎉 VS Code Marketplace 发布成功" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 发布信息" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **VSIX文件**: ${{ needs.build.outputs.vsix-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **发布时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 相关链接" >> $GITHUB_STEP_SUMMARY
          echo "- [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=$(node -p 'require(\"./package.json\").publisher').$(node -p 'require(\"./package.json\").name'))" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 用户安装方式" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# 通过 VS Code 扩展市场安装" >> $GITHUB_STEP_SUMMARY
          echo "# 1. 打开 VS Code" >> $GITHUB_STEP_SUMMARY
          echo "# 2. 按 Ctrl+Shift+X (macOS: Cmd+Shift+X)" >> $GITHUB_STEP_SUMMARY
          echo "# 3. 搜索 \"GROMACS Helper\"" >> $GITHUB_STEP_SUMMARY
          echo "# 4. 点击安装" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 或通过命令行安装" >> $GITHUB_STEP_SUMMARY
          echo "code --install-extension $(node -p 'require(\"./package.json\").publisher').$(node -p 'require(\"./package.json\").name')" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # 自动构建总结
  summary:
    needs: [build, release, marketplace]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 构建总结
        run: |
          echo "## 🎯 构建总结" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 值 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 触发方式 | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 分支 | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 版本 | ${{ needs.build.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| VSIX文件 | ${{ needs.build.outputs.vsix-name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 构建状态 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Release状态 | ${{ needs.release.result || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Marketplace状态 | ${{ needs.marketplace.result || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 版本变化 | ${{ needs.build.outputs.version_changed || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 执行发布 | ${{ needs.build.outputs.should_release || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "### 📋 手动构建参数" >> $GITHUB_STEP_SUMMARY
            echo "- **版本号**: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **发布类型**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
            echo "- **创建Release**: ${{ github.event.inputs.create_release }}" >> $GITHUB_STEP_SUMMARY
            echo "- **自动变更日志**: ${{ github.event.inputs.auto_changelog }}" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ github.event.inputs.custom_release_notes }}" ]; then
              echo "- **自定义发布说明**: 是" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **自定义发布说明**: 否" >> $GITHUB_STEP_SUMMARY
            fi
            echo "- **发布到Marketplace**: ${{ github.event.inputs.publish_marketplace }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🤖 自动构建信息" >> $GITHUB_STEP_SUMMARY
            echo "- **构建号**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
            echo "- **提交**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.build.outputs.version_changed }}" = "true" ]; then
              echo "- **版本变化**: ✅ 检测到版本号变化，自动执行发布流程" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **版本变化**: ❌ 未检测到版本号变化，仅执行构建" >> $GITHUB_STEP_SUMMARY
            fi
          fi
